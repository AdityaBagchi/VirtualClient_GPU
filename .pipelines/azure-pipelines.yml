# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - website

# pool:
  # vmImage: windows-latest

variables:
  ROOT: $(Build.SourcesDirectory)
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  ENABLE_PRS_DELAYSIGN: 1
  
  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/vse2019:latest'

steps:
- task: UseDotNet@2
  continueOnError: false
  inputs:
    packageType: 'sdk'
    version: '6.0.400'
    useGlobalJson: false
    performMultiLevelLookup: true
    workingDirectory: '$(Build.SourcesDirectory)'

- task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
  displayName: 'Setup Build Number'
  inputs:
    system: 'RevisionCounter'
    major: '1'
    minor: '5'
    exclude_commit: true

  # Ensure the artifact output/bin/obj directories are clean.
- script: $(Build.SourcesDirectory)\clean.cmd
  displayName: 'Clean Output Directories'
  
  # Build the repo.
- script: $(Build.SourcesDirectory)\build.cmd
  displayName: 'Build Solutions'

  # Build NuGet packages for the services/agents in the repo.
- script: $(Build.SourcesDirectory)\build-packages.cmd
  displayName: 'Build NuGet Packages'

- task: onebranch.pipeline.signing@1
  displayName: 'Sign VC Pilotfish Packages'
  condition: and(succeeded(), eq(variables['GENERATE_PILOTFISH_PACKAGES'], true))
  inputs:
    command: 'sign'
    signing_environment: 'azure-ado'
    signing_profile: 'internal_azure_service'
    files_to_sign: '**/*.exe;**/*.dll;**/*.ps1;**/*.psm1;**/*.cat'
    search_root: $(Build.SourcesDirectory)/out/deployment/VirtualClient
